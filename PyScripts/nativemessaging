#!/usr/bin/env python
# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# A simple native messaging host. Shows a Tkinter dialog with incoming messages
# that also allows to send message back to the webapp.

import struct
import sys
import threading
import Queue

try:
  import Tkinter
  import tkMessageBox
  import json
except ImportError:
  Tkinter = None

# Helper function that sends a message to the webapp.
def send_message(message):
   # Write message size.
  sys.stdout.write(struct.pack('I', len(message)))
  # Write the message itself.
  sys.stdout.write(message)
  sys.stdout.flush()

# Thread that reads messages from the webapp.
def read_thread_func(queue):
  message_number = 0
  while 1:
    # Read the message length (first 4 bytes).
    text_length_bytes = sys.stdin.read(4)

    if len(text_length_bytes) == 0:
      if queue:
        queue.put(None)
      sys.exit(0)

    # Unpack message length as 4 byte integer.
    text_length = struct.unpack('i', text_length_bytes)[0]

    # Read the text (JSON object) of the message.
    text = sys.stdin.read(text_length).decode('utf-8')

    #now parse the text element
    data = json.loads(str(text))
    file = open('/home/isaykatsman/PycharmProjects/ytfiber/YTFiberFrontendChromeExtension/demo.txt','w+')
    file.write(data['text']+'\n')
    file.close()

    if queue:
      queue.put(text)
    else:
      # In headless mode just send an echo message back.
      send_message('{"echo": %s}' % text)

def Main():
  send_message('"Tkinter python module wasn\'t found. Running in headless ' +
                 'mode. Please consider installing Tkinter."')
  read_thread_func(None)
  sys.exit(0)

#so far only pass folder name, assume downloads directory is local
#todo: pass destination directory
def StartDownload():
  send_message('Starting download! (not really, this is just a stub')

if __name__ == '__main__':
  Main()
